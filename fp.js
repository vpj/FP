// Generated by CoffeeScript 1.6.3
(function() {
  var FP, append, callAppend, fp, helpers, parseIdClass, setAttributes, setEvents, setStyles, setup, svgElems, wrap;

  setStyles = function(context, styles) {
    var k, v, _results;
    _results = [];
    for (k in styles) {
      v = styles[k];
      _results.push(context.style(k, v));
    }
    return _results;
  };

  setEvents = function(context, events) {
    var k, v, _results;
    _results = [];
    for (k in events) {
      v = events[k];
      _results.push(context.on(k, v));
    }
    return _results;
  };

  setAttributes = function(context, attrs) {
    var k, v, _results;
    _results = [];
    for (k in attrs) {
      v = attrs[k];
      switch (k) {
        case 'style':
          _results.push(setStyles(context, v));
          break;
        case 'on':
          _results.push(setEvents(context, v));
          break;
        case 'call':
          _results.push(context.call(v));
          break;
        case 'text':
          _results.push(context.text(v));
          break;
        default:
          _results.push(context.attr(k, v));
      }
    }
    return _results;
  };

  parseIdClass = function(str) {
    var c, i, res, _i, _len, _ref;
    res = {
      id: null,
      "class": null
    };
    _ref = str.split(".");
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      c = _ref[i];
      if (c.indexOf("#") === 0) {
        res.id = c;
      } else if (res["class"] === null) {
        res["class"] = c;
      } else {
        res["class"] += " " + c;
      }
    }
    return res;
  };

  svgElems = 'a altGlyph altGlyphDef altGlyphItem animate animateColor animateMotion\
 animateTransform circle clipPath color-profile cursor defs desc ellipse\
 feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix\
 feDiffuseLighting feDisplacementMap feDistantLight feFlood feFuncA feFuncB\
 feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology\
 feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence\
 filter font font-face font-face-format font-face-name font-face-src\
 font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient\
 marker mask metadata missing-glyph mpath path pattern polygon polyline\
 radialGradient rect script set stop style svg symbol text textPath\
 title tref tspan use view vkern';

  fp = {
    selection: null
  };

  helpers = {
    transition: function(attrs, content) {
      var selection;
      selection = this.selection = this.selection.transition();
      if (attrs.delay != null) {
        this.selection.delay(attrs.delay);
        delete attrs.delay;
      }
      setAttributes(this.selection, attrs);
      if (content != null) {
        if (typeof content.call === "function") {
          content.call(this);
        }
      }
      return selection;
    },
    select: function(str, content) {
      var selection;
      selection = this.selection = this.selection.select(str);
      if (content != null) {
        if (typeof content.call === "function") {
          content.call(this);
        }
      }
      return selection;
    },
    selectAll: function(str, content) {
      var selection;
      selection = this.selection = this.selection.selectAll(str);
      if (content != null) {
        if (typeof content.call === "function") {
          content.call(this);
        }
      }
      return selection;
    },
    data: function(data, content) {
      var selection;
      selection = this.selection = this.selection.data(data);
      if (content != null) {
        if (typeof content.call === "function") {
          content.call(this);
        }
      }
      return selection;
    },
    enter: function(content) {
      var selection;
      selection = this.selection = this.selection.enter();
      if (content != null) {
        if (typeof content.call === "function") {
          content.call(this);
        }
      }
      return selection;
    },
    exit: function(content) {
      var selection;
      selection = this.selection = this.selection.exit();
      if (content != null) {
        if (typeof content.call === "function") {
          content.call(this);
        }
      }
      return selection;
    }
  };

  append = function(name, args) {
    var arg, attrs, content, elem, prevSelection, selection, _i, _len;
    elem = {};
    attrs = {};
    content = null;
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      switch (typeof arg) {
        case 'function':
          content = arg;
          break;
        case 'object':
          attrs = arg;
          break;
        case 'string':
          elem = parseIdClass(arg);
      }
    }
    prevSelection = this.selection;
    selection = this.selection = this.selection.append(name);
    if (elem.id != null) {
      this.selection.attr('id', elem.id);
    }
    if (elem["class"] != null) {
      this.selection.attr('class', elem["class"]);
    }
    setAttributes(this.selection, attrs);
    if (typeof content === 'function') {
      if (typeof content.call === "function") {
        content.call(this);
      }
    }
    this.selection = prevSelection;
    return selection;
  };

  wrap = function(helper) {
    return function() {
      var prevSelection, selection;
      prevSelection = this.selection;
      selection = helper.apply(this, arguments);
      this.selection = prevSelection;
      return selection;
    };
  };

  callAppend = function(elem) {
    return function() {
      console.log(elem);
      return append.call(this, elem, arguments);
    };
  };

  setup = function() {
    var elem, helper, name, _i, _len, _ref, _results;
    _ref = svgElems.split(' ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elem = _ref[_i];
      fp[elem] = callAppend(elem);
    }
    _results = [];
    for (name in helpers) {
      helper = helpers[name];
      _results.push(fp[name] = wrap(helper));
    }
    return _results;
  };

  setup();

  window.FP = FP = function(selection, content) {
    var prevSelection;
    prevSelection = fp.selection;
    fp.selection = selection;
    if (content != null) {
      if (typeof content.call === "function") {
        content.call(fp);
      }
    }
    return fp.selection = prevSelection;
  };

}).call(this);
